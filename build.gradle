buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
    repositories {
        mavenCentral()
    }
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
}

group = 'com.guttery'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Spring Boot 의존성
	// JPA, Redis, Security, Validation, Web, Cache
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-cache'

	// AWS S3, CloudWatch
	implementation 'io.awspring.cloud:spring-cloud-aws-s3:3.0.2'
	implementation 'ca.pjer:logback-awslogs-appender:1.6.0'

	// OpenFeign
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.0.3'

	// Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

	// Flyway
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-mysql'

	// QueryDSL
	implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
//	annotationProcessor "io.github.mingeun0507:querydsl-apt-for-records:5.0.0.M1"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// json
	implementation 'com.fasterxml.jackson.module:jackson-module-jakarta-xmlbind-annotations'
	implementation 'com.fasterxml.jackson.core:jackson-core:2.15.1'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// DB
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'

	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('bootBuildImage') {
	builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
	useJUnitPlatform()
}

def generated = layout.buildDirectory.dir("generated/querydsl").get().asFile

tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

sourceSets {
    main.java.srcDirs += [generated]
}

clean {
    delete file(generated)
}
